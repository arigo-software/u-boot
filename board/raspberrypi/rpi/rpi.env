BOOT_ORDER=system0 system1
BOOT_system0_LEFT=3
BOOT_system1_LEFT=3

cmdline=console=${console} root=/dev/mmcblk${raucdev}p${raucrootpart} rauc.slot=${raucslot} rootwait
raucargs=setenv bootargs "${cmdline} root=/dev/mmcblk${raucdev}p${raucrootpart} rauc.slot=${raucslot}"

raucboot=test -n "${BOOT_ORDER}" || setenv BOOT_ORDER "system0 system1"; test -n "${BOOT_system0_LEFT}" || setenv BOOT_system0_LEFT 3; test -n "${BOOT_system1_LEFT}" || setenv BOOT_system1_LEFT 3; 
    setenv raucstatus; for BOOT_SLOT in "${BOOT_ORDER}"; do if test "x${raucstatus}" != "x"; then echo Skipping remaing slots!; elif test "x${BOOT_SLOT}" = "xsystem0"; then if test ${BOOT_system0_LEFT} -gt 0; 
    then echo "Found valid slot A, ${BOOT_system0_LEFT} attempts remaining"; setexpr BOOT_system0_LEFT ${BOOT_system0_LEFT} - 1; setenv raucbootpart ${raucbootpart0}; setenv raucrootpart ${raucrootpart0}; 
    setenv raucslot system0; run raucargs; setenv raucstatus success; fi; elif test "x${BOOT_SLOT}" = "xsystem1"; then if test ${BOOT_system1_LEFT} -gt 0; then echo "Found valid slot B, ${BOOT_system1_LEFT} attempts remaining"; 
    setexpr BOOT_system1_LEFT ${BOOT_system1_LEFT} - 1; setenv raucbootpart ${raucbootpart1}; setenv raucrootpart ${raucrootpart1}; setenv raucslot system1; run raucargs; setenv raucstatus success; 
    fi; fi; done; if test -n "${raucstatus}"; then env delete raucstatus; saveenv; run raucemmcboot; else echo "WARN: No valid slot found"; setenv BOOT_system0_LEFT 3; setenv BOOT_system1_LEFT 3; 
    env delete raucstatus; saveenv; reset; fi;
raucbootpart=2
raucbootpart0=2
raucbootpart1=5
raucdev=0
raucemmcboot=echo Booting A/B system from eMMC...; run readEnvironment; if run loadraucimage; then run raucargs; bootz ${kernel_addr_r} - ${fdt_addr}; else echo WARN: Cannot load kernel image; fi;
raucrootpart=3
raucrootpart0=3
raucrootpart1=6
raucslot=system0
loadraucimage=fatload mmc ${raucdev}:${raucbootpart} ${kernel_addr_r} ${image}

loadEnvironment=fatload mmc ${raucdev}:${raucbootpart} ${kernel_addr_r} uEnv.txt
importEnvironment=env import -t ${kernel_addr_r} $filesize
readEnvironment=echo read uEnv.txt; if run loadEnvironment; then run importEnvironment; echo read uEnv.txt succeeded; fi;

image=Image    
console=tty1

bootcmd=mmc dev ${raucdev}; if mmc rescan; then env exists doraucboot || setenv doraucboot 1 && saveenv; if test ${doraucboot} = 1; then run raucboot; else run raucemmcboot; fi; else echo fail mmc rescan; fi;

version=VERSION
